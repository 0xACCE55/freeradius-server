proto-dictionary radius

xlat_expr 3 + 4
match (3 + 4)

xlat_expr 3 * 4
match (3 * 4)

xlat_expr 2 + 3 * 4
match (2 + (3 * 4))

xlat_expr 2 + 3 * 4 + 5
match ((2 + (3 * 4)) + 5)

#  Same as above with brackets
xlat_expr 2 + (3 * 4) + 5
match ((2 + (3 * 4)) + 5)

# not the same
xlat_expr (2 + 3) * (4 + 5)
match ((2 + 3) * (4 + 5))

xlat_expr (2 + 3) * 4 + 5
match (((2 + 3) * 4) + 5)

xlat_expr &NAS-Port + 5
match (%{NAS-Port} + 5)

xlat_expr &Framed-IP-Address & 0xffff0000
match (%{Framed-IP-Address} & 255.255.0.0)

xlat_expr %{Framed-IP-Address} + 4
match (%{Framed-IP-Address} + 0.0.0.4)

xlat_expr 1 < 4
match (1 < 4)

xlat_expr &Service-Type == Framed-User
match (%{Service-Type} == Framed-User)

xlat_expr 1 + (&Service-Type == Framed-User)
match (1 + (%{Service-Type} == Framed-User))

#
#  Strings of various forms
#
xlat_expr &Filter-Id == "foo"
match (%{Filter-Id} == \"foo\")

xlat_expr "foo" == "bar"
match (\"foo\" == \"bar\")

# note '/' is a prefix, not "divide by 24".
# and a useless cast is removed
xlat_expr &Framed-IP-Address < (ipv4prefix) 192.168.0.0/24
match (%{Framed-IP-Address} < 192.168.0.0/24)

xlat_expr &Framed-IP-Address < (ipv4prefix) 192.168.0.0
match (%{Framed-IP-Address} < 192.168.0.0/32)

#
#  For IP addresses, the other side is automatically upcast to a prefix
#

#xlat_expr &Framed-IP-Address < 192.168.0.0/24
#match %(cmp_lt:%{Framed-IP-Address}%(cast:ipv4prefix 192.168.0.0/32))

#  same as above, but swap the order
xlat_expr (ipv4prefix) 192.168.0.0/24 > &Framed-IP-Address
match (192.168.0.0/24 > %{Framed-IP-Address})

#
#  Logical && and ||
#
xlat_expr 1 < 2 || 4 > 3
match ((1 < 2) || (4 > 3))

xlat_expr 2 || (1 > 4)
match (2 || (1 > 4))

xlat_expr &Filter-Id
match %{Filter-Id}

xlat_expr %{md5:foo} + "foo"
match  (%{md5:foo} + \"foo\")

#  We can name the xlat's, tho we don't need to
xlat_expr %(op_add:4 3) + 6
match ((4  + 3) + 6)


#
#  useless casts are omitted.
#
xlat_expr 1 < (uint32) 2
match (1 < 2)

#
#  @todo - for exec, xlat, etc., if we're doing an existence check of
#  string / octets, then the check is for "length>0", NOT for parsing
#  the contents of the data type.
#

xlat_expr 1 < 2 < 3
match ((1 < 2) < 3)

count
match 51
