proto-dictionary radius

#xlat_purify %(op_add:4 3) + 6
#match 13

#
#  xlat_expr, but purified
#
xlat_purify 3 + 4
match 7

xlat_purify 3 * 4
match 12

xlat_purify 2 + 3 * 4
match 14

xlat_purify 2 + 3 * 4 + 5
match 19

#  Same as above with brackets
xlat_purify 2 + (3 * 4) + 5
match 19

# not the same
xlat_purify (2 + 3) * (4 + 5)
match 45

xlat_purify (2 + 3) * 4 + 5
match 25

xlat_purify &NAS-Port + 5
match (%{NAS-Port} + 5)

xlat_purify &Framed-IP-Address & 0xffff0000
match (%{Framed-IP-Address} & 255.255.0.0)

#
#  Can't parse or cast RHS to nothing.
#
xlat_purify &Framed-IP-Address + 4
match (%{Framed-IP-Address} + 0.0.0.4)

xlat_purify 1 < 4
match yes

xlat_purify &Service-Type == Framed-User
match (%{Service-Type} == Framed-User)

xlat_purify 1 + (&Service-Type == Framed-User)
match (1 + (%{Service-Type} == Framed-User))

#
#  Strings of various forms
#
xlat_purify &Filter-Id == "foo"
match (%{Filter-Id} == "foo")

xlat_purify "foo" == "bar"
match no

# note '/' is a prefix, not "divide by 24".
# and a useless cast is removed
xlat_purify &Framed-IP-Address < (ipv4prefix) 192.168.0.0/24
match (%{Framed-IP-Address} < 192.168.0.0/24)

xlat_purify &Framed-IP-Address < (ipv4prefix) 192.168.0.0
match (%{Framed-IP-Address} < 192.168.0.0/32)

#
#  For IP addresses, the other side is automatically upcast to a prefix
#

#xlat_purify &Framed-IP-Address < 192.168.0.0/24
#match %(cmp_lt:%{Framed-IP-Address}%(cast:ipv4prefix 192.168.0.0/32))

#  same as above, but swap the order
xlat_purify (ipv4prefix) 192.168.0.0/24 > &Framed-IP-Address
match (192.168.0.0/24 > %{Framed-IP-Address})

#
#  Logical && and ||
#
xlat_purify 1 < 2 || 4 > 3
match yes

xlat_purify 2 || (1 > 4)
match yes

xlat_purify &Filter-Id
match %{Filter-Id}

xlat_purify %{md5:foo} + "foo"
match  (%{md5:foo} + "foo")

#  We can name the xlat's, tho we don't need to
#
#  And naming the xlat's means that they don't set up
#  with the magic token field, so optimizations don't work?
#
xlat_purify %(op_add:4 3) + 6
match ((4 + 3) + 6)


#
#  useless casts are omitted.
#
xlat_purify 1 < (uint32) 2
match yes

#
#  @todo - for exec, xlat, etc., if we're doing an existence check of
#  string / octets, then the check is for "length>0", NOT for parsing
#  the contents of the data type.
#

#
#  This should likely be a parse error at boot time?
#
xlat_purify 1 < 2 < 3
match yes

count
match 51
