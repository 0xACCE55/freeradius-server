proto-dictionary radius

#
#  xlat_expr, but purified
#
xlat_purify 3 + 4
match 7

xlat_purify 3 * 4
match 12

xlat_purify 2 + 3 * 4
match 14

xlat_purify 2 + 3 * 4 + 5
match 19

#  Same as above with brackets
xlat_purify 2 + (3 * 4) + 5
match 19

# not the same
xlat_purify (2 + 3) * (4 + 5)
match 45

xlat_purify (2 + 3) * 4 + 5
match 25

xlat_purify &NAS-Port + 5
match (%{NAS-Port} + 5)

xlat_purify &Framed-IP-Address & 0xffff0000
match (%{Framed-IP-Address} & 0xffff0000)

#
#  Can't parse or cast RHS to nothing.
#
xlat_purify &Framed-IP-Address + 4
match (%{Framed-IP-Address} + 4)

xlat_purify 1 < 4
match yes

#
#  There's sopme bunch of things to fix here:
#
#  * the tokenizer needs to track offsets, so it can return the offset which cause the error.
#
xlat_purify &Service-Type == Framed-User
match (%{Service-Type} == Framed-User)

#xlat_purify 1 + (&Service-Type == Framed-User)
#match (1 + (%{Service-Type} == Framed-User))

#
#  Strings of various forms
#

xlat_purify &Filter-Id == "foo"
match (%{Filter-Id} == "foo")

xlat_purify "foo" == "bar"
match no

# note '/' is a prefix, not "divide by 24".
# and a useless cast is removed
xlat_purify &Framed-IP-Address < (ipv4prefix) 192.168.0.0/24
match (%{Framed-IP-Address} < 192.168.0.0/24)

xlat_purify &Framed-IP-Address < (ipv4prefix) 192.168.0.0
match (%{Framed-IP-Address} < 192.168.0.0/32)

#
#  For IP addresses, the other side is automatically upcast to a prefix
#

xlat_purify &Framed-IP-Address < 192.168.0.0/24
match (%{Framed-IP-Address} < 192.168.0.0/24)

#  same as above, but swap the order
xlat_purify (ipv4prefix) 192.168.0.0/24 > &Framed-IP-Address
match (192.168.0.0/24 > %{Framed-IP-Address})

#
#  Logical && and ||
#
xlat_purify 1 < 2 || 4 > 3
match yes

xlat_purify 2 || (1 > 4)
match yes

xlat_purify &Filter-Id
match %{Filter-Id}

xlat_purify %{md5:foo} + "bar"
match 0xacbd18db4cc2f85cedef654fccc4a4d8626172

#  We can name the xlat's, tho we don't need to
#
#  And naming the xlat's means that they don't set up
#  with the magic token field, so optimizations don't work?
#

xlat_purify (4 + 3) + 6
match 13

#
#  @todo - this gets parsed as "4" + "3", because the parsing of
#  XLAT_BOX in xlat_tokenize_string() just makes everything into
#  FR_TYPE_STRING.  The parsing in tmpl_tokenize() is different,
#  as it tries to figure out what data type things are.
#
#  The solution is likely to have the expression code double-check
#  it's arguments on instantiate, and if they are FR_TYPE_STRING with
#  quote T_BARE_WORD, then go re-evaluate them.  Tho that seems
#  terrible, TBH.  A cleaner way would be to add a parse flag which tells
#  the xlat tokenizer "please try to figure out WTF this value is".
#
#  which then gets "43", and then "43" to int, and 43+6 -> 49
#
#  The rules for parsing tmpls at run-time are apparently different
#  than parsing them at compile time?
#
xlat_purify %(op_add:4 3) + 6
match 49
#match ((4 + 3) + 6)

#
#  useless casts are omitted.
#
xlat_purify 1 < (uint32) 2
match yes

#
#  @todo - for exec, xlat, etc., if we're doing an existence check of
#  string / octets, then the check is for "length>0", NOT for parsing
#  the contents of the data type.
#

#
#  This should likely be a parse error at boot time?
#
xlat_purify 1 < 2 < 3
match yes

xlat_purify &Service-Type == 1
match (%{Service-Type} == 1)

#
#  Convert the RHS to a simpler version
#
xlat_purify &Service-Type == (1 + 2)
match (%{Service-Type} == 3)

#
#  This is so wrong...
#
#xlat_purify &Reply-Message == "foo"
#match ERROR offset 1: Failed resolving attribute in expansion: Message

#
#  @todo - find some way quote the RHS?  Maybe just make it
#  T_SINGLE_QUOTED_STRING for "string" types, and leave it T_BARE_WORD
#  for everything else.  But this presumes that the RHS is always only
#  one value-box, and perhaps it isn't?
#
xlat_purify &Filter-Id == ("foo" + "bar")
match (%{Filter-Id} == 'foobar')

xlat_purify !&User-Name
match !%{User-Name}

xlat_purify (1 < 2)
match yes

xlat_purify !(1 < 2)
match no

xlat_purify !true
match no

count
match 67
