#
#  Calculate various thingies.
#

calc uint8 255 + uint8 255 -> uint8
match Value overflows/underflows when calculating answer for uint8

calc uint8 127 + uint8 127 -> uint8
match 254

#
#  Wildly varying types get intermediate values upcast to the "best"
#  type which is likely to handle the result.  The final result is
#  then cast to the output type.
#
calc int8 -1 + uint8 14 -> int16
match 13

calc int32 -1 + uint8 14 -> int16
match 13

#
#  Intermediate values are too large for destination, but the
#  resulting value can fit.
#
calc uint32 1000 - uint32 999 -> uint8
match 1

# string append
calc string "a" . string "b" -> string
match ab

# string prepend
calc string "a" ^ string "b" -> string
match ba

# time deltas
calc time_delta 1 + time_delta 2 -> time_delta
match 3

# dates can be subtracted, but not added.
calc date "Jan 11 1970 00:00:00 UTC" - date "Jan 1 1970 00:00:00 UTC" -> time_delta
match 864000

#  One day earlier
calc date "Jan 11 1970 00:00:00 UTC" -  time_delta 86400 -> date
match Jan 10 1970 00:00:00 UTC

calc date "Jan 11 1970 00:00:00 UTC" -  time_delta 1d -> date
match Jan 10 1970 00:00:00 UTC

#
#  Comparisons don't need output data types
#
calc date "Jan 11 1970 00:00:00 UTC" < date "Jan 1 1970 00:00:00 UTC"
match no

# we can "fake out" structs by just appending stuff
calc ipaddr 127.0.0.1 . ipaddr 127.0.0.2 -> octets
match 0x7f0000017f000002

# this can be cast
calc string "1" < uint32 2 -> bool
match yes

# this can't
calc string "stuff" < uint32 2 -> bool
match Failed parsing string as type 'uint32'

#
# make an IP out of a prefix and an offset
#
calc ipv4prefix 127/8 + uint8 1 -> ipaddr
match 127.0.0.1

count
match 32
