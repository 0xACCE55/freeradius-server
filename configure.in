dnl #############################################################
dnl #
dnl #  For information about autoconf, see:
dnl #
dnl #  http://www.primate.wisc.edu/software/autoconf/
dnl #  
dnl #  The recommended order is:
dnl #
dnl #  AC_INIT(file)
dnl #  0. checks for compiler, libtool, and command line options
dnl #  1. checks for programs
dnl #  2. checks for libraries
dnl #  3. checks for header files
dnl #  4. checks for typedefs
dnl #  5. checks for structures and functions
dnl #  6. checks for compiler characteristics
dnl #  7. checks for library functions
dnl #  8. checks for system services
dnl #  AC_OUTPUT([file...])
dnl #
dnl #############################################################

AC_INIT(src/main/radiusd.c)
AC_CONFIG_HEADER(src/include/autoconf.h)
AC_REVISION($Revision$)dnl
dnl AC_PREFIX_DEFAULT(/usr/local)

dnl #############################################################
dnl #
dnl #  0. Checks for compiler, libtool, and command line options.
dnl #
dnl #############################################################

dnl Check for GNU cc
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_RANLIB

PACKAGE=freeradius

dnl Find GNU Make.
AC_CHECK_PROG(GMAKE, gmake, yes, no)
if test $GMAKE = no; then
  AC_PATH_PROG(MAKE, make, /usr/local/bin/make)
else
  AC_PATH_PROG(MAKE, gmake, /usr/local/gnu/bin/make)
fi
makever=`$ac_cv_path_MAKE --version 2>&1 | grep "GNU Make"`
if test -z "$makever"; then
  AC_MSG_ERROR(GNU Make is not installed.  Please download and install it
		from ftp://prep.ai.mit.edu/pub/gnu/make/ before continuing.)
fi

dnl ensure that we're looking for dlopen
AC_LIBTOOL_DLOPEN

dnl Figure out how to build shared libraries
AC_PROG_LIBTOOL

dnl extra argument: --with-logdir
logdir='${localstatedir}/log'
AC_MSG_CHECKING(logdir)
AC_ARG_WITH(logdir,
[  --with-logdir=DIR       Directory for logfiles [LOCALSTATEDIR/log] ],
[ case "$withval" in
    no)
	AC_MSG_ERROR(Need logdir)
	;;
    yes)
	;;
    *)
	logdir="$withval"
	;;
  esac ]
)
AC_SUBST(logdir)
AC_MSG_RESULT($logdir)

dnl extra argument: --with-radacctdir
radacctdir='${logdir}/radacct'
AC_MSG_CHECKING(radacctdir)
AC_ARG_WITH(radacctdir,
[  --with-radacctdir=PATH  Directory for detail files [LOGDIR/radacct] ],
[ case "$withval" in
    no)
	AC_MSG_ERROR(Need radacctdir)
	;;
    yes)
	;;
    *)
	radacctdir="$withval"
	;;
  esac ]
)
AC_SUBST(radacctdir)
AC_MSG_RESULT($radacctdir)

dnl extra argument: --with-raddbdir
raddbdir='${sysconfdir}/raddb'
AC_MSG_CHECKING(raddbdir)
AC_ARG_WITH(raddbdir,
[  --with-raddbdir=DIR     Directory for config files [SYSCONFDIR/raddb] ],
[ case "$withval" in
    no)
	AC_MSG_ERROR(Need raddbdir)
	;;
    yes)
	;;
    *)
	raddbdir="$withval"
	;;
  esac ]
)
AC_SUBST(raddbdir)
AC_MSG_RESULT($raddbdir)

dnl extra argument: --with-dbm
DBMLIB=
BUILDDBM=
AC_ARG_WITH(dbm,
[  --with-dbm              Compile in DBM support],
[ case "$withval" in
    no)
	;;
    yes)
	AC_DEFINE(WITH_DBM)
	DBMLIB=-ldbm
	BUILDDBM=builddbm
  esac ]
)

dnl extra argument: --with-ndbm
AC_ARG_WITH(ndbm,
[  --with-ndbm             Compile in NDBM support],
[ case "$withval" in
    no)
	;;
    yes)
	AC_DEFINE(WITH_NDBM)
	DBMLIB=-ldb
	BUILDDBM=builddbm
  esac ]
)

AC_SUBST(DBMLIB)
AC_SUBST(BUILDDBM)

dnl extra argument: --with-ascend-hack
AC_ARG_WITH(ascend-hack,
[  --with-ascend-hack      Include Ascend hacks],
[ case "$withval" in
    no)
	;;
    yes)
	AC_DEFINE(WITH_ASCEND_HACK)
	dnl if they haven't said to use it, do so.
	if test "${with_ascend_cpl+set}" != "set"; then
		with_ascend_cpl=23
	fi
    esac ]
)

dnl extra argument: --with-ascend-cpl=N
AC_ARG_WITH(ascend-cpl,
[  --with-ascend-cpl=N     Set Ascend Channels Per Line to N [23] ],
[ case "$withval" in
    *)
	AC_DEFINE_UNQUOTED(ASCEND_CHANNELS_PER_LINE, $withval)
  esac ]
)

dnl extra argument: --with-ntdomain-hack
AC_ARG_WITH(ntdomain-hack,
[  --with-ntdomain-hack    Include NT Domain hack],
[ case "$withval" in
    no)
	;;
    yes)
	AC_DEFINE(WITH_NTDOMAIN_HACK)
  esac ]
)

dnl extra argument: --with-spcj-hack
AC_ARG_WITH(spcj-hack,
[  --with-spcj-hack        Include Specialix Jetstream hacks],
[ case "$withval" in
    no)
	;;
    yes)
	AC_DEFINE(WITH_SPECIALIX_JETSTREAM_HACK)
  esac ]
)

dnl extra argument: --with-dict-nocase
AC_ARG_WITH(dict-nocase,
[  --with-dict-nocase      Make dictionary case-independant],
[ case "$withval" in
    no)
	;;
    yes)
	AC_DEFINE(WITH_DICT_NOCASE)
  esac ]
)

dnl extra argument: --with-attrib-nmc
ATTRIB_NMC=
AC_ARG_WITH(attrib-nmc,
[  --with-attrib-nmc       Include USR-style vendor specific attributes (default=yes)],
[ ATTRIB_NMC=$withval
 case "$withval" in
    no)
	;;
    yes)
	AC_DEFINE(ATTRIB_NMC)
  esac ]
)
dnl if they haven't said to use it, do so.
if test "$ATTRIB_NMC" = "";then
  AC_DEFINE(ATTRIB_NMC)
fi

dnl extra argument: --with-ascend-binary
ASCEND_BINARY=
AC_ARG_WITH(ascend-binary,
[  --with-ascend-binary    Include support for Ascend binary filter attributes (default=yes)],
[ ASCEND_BINARY=$withval
 case "$withval" in
    no)
	;;
    yes)
	AC_DEFINE(ASCEND_BINARY)
  esac ]
)
dnl if they haven't said to use it, do so.
if test "X$ASCEND_BINARY" = "X";then
  AC_DEFINE(ASCEND_BINARY)
fi

dnl extra argument: --with-threads
WITH_THREADS=yes
AC_ARG_WITH(threads,
[  --with-threads          Use threads, if available.  (default=yes) ],
[ case "$withval" in
    *)
	WITH_THREADS=$withval
  esac ]
)

dnl extra argument: --with-thread-pool
WITH_THREAD_POOL=no
AC_ARG_WITH(thread-pool,
[  --with-thread-pool      Use a pool of threads for high-load systems.  (default=no) ],
[ case "$withval" in
    *)
	WITH_THREAD_POOL=$withval
  esac ]
)

AC_ARG_ENABLE(ltdl-install,
[  --disable-ltdl-install  do not install libltdl])
if test x"${enable_ltdl_install+set}" != xset; then
  enable_ltdl_install=yes
  ac_configure_args="$ac_configure_args --enable-ltdl-install"
fi
AC_CONFIG_SUBDIRS(src/libltdl)

dnl See what include-style is used by the make program.
dnl AC_MSG_CHECKING(include style for make)
dnl echo "include /dev/null" > testmake.$$
dnl echo "all:" >> testmake.$$
dnl make -f testmake.$$ >/dev/null 2>&1
dnl if test $? = 0
dnl then
dnl 	INCLUDE=include
dnl 	IQUOTE=
dnl else
dnl 	INCLUDE=.include
dnl 	IQUOTE='"'
dnl fi
dnl rm -f testmake.$$
dnl AC_MSG_RESULT(" $INCLUDE")
dnl AC_SUBST(INCLUDE)
dnl AC_SUBST(IQUOTE)

dnl #############################################################
dnl #
dnl #  1. Checks for programs
dnl #
dnl #############################################################

AC_PATH_PROG(PERL, perl, /usr/local/bin/perl)
if test ! -x $ac_cv_path_PERL; then
  AC_MSG_ERROR(perl not found - fatal)
fi
AC_PATH_PROG(SNMPGET, snmpget, /usr/local/bin/snmpget)
AC_PATH_PROG(SNMPWALK, snmpwalk, /usr/local/bin/snmpwalk)
AC_PATH_PROG(RUSERS, rusers, /usr/bin/rusers)

dnl FIXME This is truly gross.
missing_dir=`cd $ac_aux_dir && pwd`
AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)
AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)
AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)

dnl #
dnl # check for AIX, to allow us to use some BSD functions
dnl # must be before macros that call the compiler.
dnl #
AC_AIX

dnl #############################################################
dnl #
dnl #  2. Checks for libraries
dnl #
dnl #############################################################

dnl If using pthreads, check for -lpthread (posix) or -lc_r (*BSD)
PTHREADLIB=
if test "$WITH_THREADS" = "yes"; then 
  AC_CHECK_HEADERS(pthread.h)
  AC_CHECK_LIB(pthread, pthread_create,
    PTHREADLIB="-lpthread"
  )
  if test "X$PTHREADLIB" = "X"; then
    AC_CHECK_LIB(c_r, pthread_create,
      PTHREADLIB="-lc_r"
    )
  fi
  LIBS="$LIBS $PTHREADLIB"
fi

dnl #
dnl #  Checks to ensure that the thread pool code can build.
dnl #
if test "$WITH_THREAD_POOL" = "yes"; then
  dnl #
  dnl # If using thread pools, check that threading is enabled
  dnl #
  if test "$WITH_THREADS" != "yes"; then
    AC_MSG_ERROR(You must have threads enabled for thread pools to work.)
  fi

  dnl #
  dnl # If using thread pools, check that we have thread libraries
  dnl #
  if test "X$PTHREADLIB" = "X"; then
    AC_MSG_ERROR(You must have threading libraries for thread pools to work.)
  fi

dnl #
dnl #  Check for sem_init all by itself
dnl #
  AC_CHECK_FUNC(sem_init)
  if test "X$ac_cv_func_sem_init" = "Xno"; then

dnl #
dnl #  If not found, sem_init is in -lposix4 on Solaris
dnl #
    AC_CHECK_LIB(posix4, sem_init)

    if test "X$ac_cv_lib_posix4_sem_init" = "X"; then
      AC_MSG_WARN(You do not have posix semaphores.  Disabling thread pools)
      WITH_THREAD_POOL=no
    fi
  fi

dnl #
dnl #  Finally, after all of the checks above, we see if
dnl #  we can REALLY use the thread pools.
dnl #
  if test "$WITH_THREAD_POOL" = "yes"; then
    AC_DEFINE(WITH_THREAD_POOL,1)
  fi
fi

dnl Check if we need -lsocket
AC_CHECK_LIB(socket, getsockname)

dnl Check for -lresolv
dnl This library may be needed later.
AC_CHECK_LIB(resolv, inet_aton)

dnl Check if we need -lnsl. Usually if we want to
dnl link against -lsocket we need to include -lnsl as well.
AC_CHECK_LIB(nsl, inet_ntoa)

dnl #############################################################
dnl #
dnl #  3. Checks for header files
dnl #
dnl #############################################################

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_SYS_WAIT

AC_CHECK_HEADERS( \
	unistd.h \
	crypt.h \
	errno.h \
	resource.h \
	getopt.h \
	malloc.h \
	utmp.h \
	utmpx.h \
	sys/select.h \
	dlfcn.h \
	regex.h \
	syslog.h \
	inttypes.h \
	stdint.h \
	arpa/inet.h \
	sys/time.h
)

dnl #############################################################
dnl #
dnl #  4. Checks for typedefs
dnl #
dnl #############################################################

dnl #
dnl # Ensure that these are defined
dnl #
AC_TYPE_OFF_T 
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T

dnl Check for socklen_t
AC_CACHE_CHECK(for socklen_t,
               fr_cv_socklen_t,
    [ socklen_t=no
      AC_TRY_COMPILE([#include <sys/types.h>
        #include <sys/socket.h>],
        [socklen_t foo],
        AC_DEFINE(HAVE_SOCKLEN_T) fr_cv_socklen_t=yes,
      )
     ]
)

dnl Check for uint8_t
AC_CACHE_CHECK(for uint8_t,
               fr_cv_uint8_t,
     [ fr_cv_uint8_t=no
       AC_TRY_COMPILE([
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif
],
         [uint8_t foo],
         fr_cv_uint8_t=yes
       )
     ]
)

if test "$fr_cv_uint8_t" != "yes"; then
         AC_DEFINE(uint8_t, unsigned char)
fi

dnl Check for uint32_t
AC_CACHE_CHECK(for uint32_t,
               fr_cv_uint32_t,
     [ fr_cv_uint32_t=no
       AC_TRY_COMPILE([
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif
],
         [uint32_t foo],
         fr_cv_uint32_t=yes
       )
     ]
)

if test "$fr_cv_uint32_t" != "yes"; then
	AC_DEFINE(uint32_t, unsigned int)
	UINT32_T_AS_INT=yes
fi

dnl #
dnl #  If we don't have uint32_t, then verify that sizeof(unsigned int)==4
dnl #  If the integers are NOT 4 octets long, then the previous definition
dnl #  won't work, and we won't produce correct RADIUS packets.
dnl #
if test "x$UINT32_T_AS_INT" != "x"; then
  AC_CHECK_SIZEOF(unsigned int, [4])
fi

dnl #############################################################
dnl #
dnl #  5. Checks for structures and functions
dnl #
dnl #############################################################
AC_CHECK_FUNCS( \
	getopt_long \
	lockf \
	strsignal \
	sigaction \
	snprintf \
	vsnprintf \
	setsid \
	strncasecmp \
	strcasecmp \
	inet_aton \
	gethostname \
	setlinebuf \
	getusershell
)
RADIUSD_NEED_DECLARATIONS( \
	crypt \
	strncasecmp \
	strcasecmp \
	inet_aton \
	gethostname \
	setlinebuf \
	getusershell \
	endusershell
)

AC_TYPE_SIGNAL

dnl #############################################################
dnl #
dnl #  6. Checks for compiler characteristics
dnl #
dnl #############################################################

dnl #
dnl # Ensure that these are defined
dnl #
AC_C_CONST 

dnl #
dnl # See if this is OS/2
dnl #
AC_MSG_CHECKING(type of OS)
OS=`uname -s`
AC_MSG_RESULT($OS)
if test "$OS" = "OS/2"; then
	LIBPREFIX=
else
	LIBPREFIX=lib
fi
AC_SUBST(LIBPREFIX)

dnl #
dnl # Set Default CFLAGS
dnl #
if test "$GCC" = "yes"; then
    CFLAGS="$CFLAGS -Wall -D_GNU_SOURCE"
fi

dnl #############################################################
dnl #
dnl #  7. Checks for library functions
dnl #
dnl #############################################################

dnl Check for libcrypt
dnl We use crypt(3) which may be in libc, or in libcrypt (eg FreeBSD)
AC_CHECK_LIB(crypt, crypt,
  CRYPTLIB="-lcrypt"
)
AC_SUBST(CRYPTLIB)
if test "$CRYPTLIB" != ""; then
  AC_DEFINE(HAVE_CRYPT)
else
  AC_CHECK_FUNC(crypt, AC_DEFINE(HAVE_CRYPT))
fi

dnl ***********************
dnl  This next bit is stolen from glib, and modified to work for FreeRADIUS.
dnl ***********************
MODULE_LIBS=
MODULE_CFLAGS=
MODULE_LDFLAGS=
MODULE_HAVE_DLERROR=0

dnl *** dlopen() and dlsym() in system libraries
if test -z "$DYNAMIC_MODULES"; then
	AC_CHECK_FUNC(dlopen,
		AC_CHECK_FUNC(dlsym,
			[ DYNAMIC_MODULES=DYNAMIC_MODULES_DL HAVE_DLOPEN=1 ]
		,)
	,)
fi

dnl *** dlopen() and dlsym() in libdl
if test -z "$DYNAMIC_MODULES"; then
	AC_CHECK_LIB(dl, dlopen,
		AC_CHECK_LIB(dl, dlsym,
			MODULE_LIBS=-ldl
			[ DYNAMIC_MODULES=DYNAMIC_MODULES_DL HAVE_DLOPEN=1 ]
		,)
	,)
fi

dnl *** shl_load() in libdld (HP-UX)
if test -z "$DYNAMIC_MODULES"; then
        AC_MSG_CHECKING(how to export all symbols)
        SAVED_LDFLAGS=$LDFLAGS

        LDFLAGS="$LDFLAGS -Wl,-E"
        AC_TRY_LINK(,[ return 0; ],
                [ MODULE_LDFLAGS="-Wl,-E" ],[
                LDFLAGS="$SAVED_LDFLAGS -bexpall"
                AC_TRY_LINK(,[ return 0; ],
                        MODULE_LDFLAGS="-bexpall",
                        MODULE_LDFLAGS=""
                )
        ])

        LDFLAGS=$SAVED_LDFLAGS
        AC_MSG_RESULT($MODULE_LDFLAGS)

	AC_CHECK_LIB(dld, shl_load,
		MODULE_LIBS=-ldld
		DYNAMIC_MODULES=DYNAMIC_MODULES_DLD
	,)
fi

dnl *** additional checks for DYNAMIC_MODULES_DL
if test "$DYNAMIC_MODULES" = "DYNAMIC_MODULES_DL"; then

dnl *** check whether we need preceeding underscores
	AC_MSG_CHECKING(for preceeding underscore in symbols)
	AC_CACHE_VAL(rlm_cv_uscore,[
		AC_TRY_RUN([
		#include <dlfcn.h>
                int rlm_underscore_test (void) { return 42; }
		int main() {
		  void *f1 = (void*)0, *f2 = (void*)0, *handle;
		  handle = dlopen ((void*)0, 0);
		  if (handle) {
		    f1 = dlsym (handle, "rlm_underscore_test");
		    f2 = dlsym (handle, "_rlm_underscore_test");
		  } return (!f2 || f1);
		}],
			rlm_cv_uscore=yes,
			rlm_cv_uscore=no,
			rlm_cv_uscore=no
		)
		rm -f plugin.c plugin.o plugin.lo
	])
	AC_MSG_RESULT($rlm_cv_uscore)
	if test "x$rlm_cv_uscore" = "xyes"; then
		AC_DEFINE(MODULE_NEED_USCORE)
	fi

	LDFLAGS="$LDFLAGS_orig"
dnl *** check for having dlerror()
	AC_CHECK_FUNC(dlerror,
		MODULE_HAVE_DLERROR=1,
		MODULE_HAVE_DLERROR=0)
fi
dnl *** done, have e got an implementation?
if test -z "$DYNAMIC_MODULES"; then
	DYNAMIC_MODULES=0
fi

AC_SUBST(DYNAMIC_MODULES)
AC_DEFINE(HAVE_DLOPEN)
AC_SUBST(MODULE_LIBS)
AC_SUBST(MODULE_CFLAGS)
AC_SUBST(MODULE_LDFLAGS)
AC_SUBST(MODULE_HAVE_DLERROR)

dnl #############################################################
dnl #
dnl #  8. Checks for system services
dnl #
dnl #############################################################

dnl #
dnl # Figure out where libtool is located,
dnl #
LIBTOOL="`pwd`/libtool"
AC_SUBST(LIBTOOL)

dnl #############################################################
dnl #
dnl #  And finally, output the results.
dnl #
dnl #############################################################

dnl #
dnl #  Substitute whatever libraries we found to be necessary
dnl #
AC_SUBST(LIBS)

AC_OUTPUT(\
	./Make.inc \
	./src/include/build-radpaths-h \
	./src/main/checkrad.pl \
	./src/main/radlast \
	./src/main/radtest \
	./scripts/rc.radiusd \
	./scripts/radwatch \
	./scripts/check-radiusd-config
)

AC_OUTPUT_COMMANDS([echo timestamp > src/include/stamp-h])
AC_OUTPUT_COMMANDS([(cd ./src/include && /bin/sh ./build-radpaths-h)])
AC_OUTPUT_COMMANDS([(cd ./src/main   && chmod +x checkrad.pl radlast radtest)])
AC_OUTPUT_COMMANDS([(cd ./scripts    && chmod +x rc.radiusd radwatch check-radiusd-config)])
