dnl
dnl  M4 code copyright 2000, Chad Miller and others
dnl
dnl
##
## radiusd.conf	-- FreeRADIUS server configuration file.
##
##	http://www.freeradius.org/
##

#
#  	The location of other config files and
#  	logfiles are declared in this file
#
#  	Also general configuration for modules can be done
#  	in this file, it is exported through the API to
#  	modules that ask for it.
#

# Stuff from autoconf
prefix = @prefix@
exec_prefix = @exec_prefix@
sysconfdir = @sysconfdir@
localstatedir = @localstatedir@
sbindir = @sbindir@
logdir = @logdir@
libdir = @libdir@
raddbdir = @raddbdir@
radacctdir = @radacctdir@

#
#  Location of config and logfiles.
#
confdir    = ${raddbdir}

run_dir    = ${localstatedir}/run

#
#  pidfile: Where to place the PID of the RADIUS server.
#
#  The server may be signalled while it's running by using this
#  file.
#
#  e.g.:  kill -HUP `cat /var/run/radiusd.pid`
#
pidfile    = ${run_dir}/radiusd.pid

#
# user/group: The name (or #number) of the user/group to run httpd as.
#    On SCO (ODT 3) use "user = nouser" and "group = nogroup".
#    On HPUX you may not be able to use shared memory as nobody, and the
#    suggested workaround is to create a user www and use that user.
#
#  NOTE that some kernels refuse to setgid(group)
#  when the value of (unsigned)group is above 60000;
#  don't use group nobody on these systems!
#
#  On systems with shadow passwords, you might have to set 'group = shadow'
#  for the server to be able to read the shadow password file.
#
user = nobody
group = nobody

#
#  max_request_time: The maximum time (in seconds) to handle a request.
#
#  Requests which take more time than this to process are killed, and
#  a REJECT message is returned.
#
#  Useful range of values: 5 to 120
#
max_request_time	= 30

#
#  cleanup_delay: The time to wait (in seconds) before cleaning up
#  a reply which was sent to the NAS.
#
#  The RADIUS request is normally cached internally for a short period
#  of time, after the reply is sent to the NAS.  The reply packet may be
#  lost in the network, and the NAS will not see it.  The NAS will then
#  re-send the request, and the server will respond quickly with the
#  cached reply.
#
#  If this value is set too low, then duplicate requests from the NAS
#  MAY NOT be detected, and will instead be handled as seperate requests.
#
#  If this value is set too high, then the server will cache too many
#  requests, and some new requests may get blocked.  (See 'max_requests'.)
#
#  Useful range of values: 2 to 10
#
cleanup_delay		= 5

#
#  max_requests: The maximum number of requests which the server keeps
#  track of.  This should be 256 multiplied by the number of clients.
#  e.g. With 4 clients, this number should be 1024.
#
#  If this number is too low, then when the server becomes busy,
#  it will not respond to any new requests, until the 'cleanup_delay'
#  time has passed, and it has removed the old requests.
#
#  If this number is set too high, then the server will use a bit more
#  memory for no real benefit.
#
#  If you aren't sure what it should be set to, it's better to set it
#  too high than too low.  Setting it to 1000 per client is probably
#  the highest it should be.
#
#  Useful range of values: 256 to infinity
#
max_requests		= 1024

#
#  bind_address:  Make the server listen on a particular IP address, and
#  send replies out from that address.  This directive is most useful
#  for machines with multiple IP addresses on one interface.
#
#  It can either contain "*", or an IP address, or a fully qualified
#  Internet domain name.  The default is "*"
#
bind_address            = *

#
#  port: Allows you to bind FreeRADIUS to a specific port.
#
#  The default port that most NAS boxes use is 1645, which is historical.
#  RFC 2138 defines 1812 to be the new port.  Many new servers and
#  NAS boxes use 1812, which can create interoperability problems.
#
#  The port is defined here to be 0 so that the server will pick up
#  the machine's local configuration for the radius port, as defined
#  in /etc/services.
#
#  If you want to use the default RADIUS port as defined on your server,
#  (usually through 'grep radius /etc/services') set this to 0 (zero).
#
#  A port given on the command-line via '-p' over-rides this one.
#
port = 0

#
#  Which program to execute check doing concurrency checks.
#
checkrad   = ${sbindir}/checkrad

#
#  hostname_lookups: Log the names of clients or just their IP addresses
#  e.g., www.freeradius.org (on) or 206.47.27.232 (off).
#  The default is off because it'd be overall better for the net if people
#  had to knowingly turn this feature on, since enabling it means that
#  each client request will result in AT LEAST one lookup request to the
#  nameserver.
#
#  Turning hostname lookups off also means that the server won't block
#  for 30 seconds, if it sees an IP address which has no name associated
#  with it.
#
# allowed values: {no, yes}
#
hostname_lookups	= no

#
#  Core dumps are a bad thing.  This should only be set to 'yes'
#  if you're debugging a problem with the server.
#
# allowed values: {no, yes}
#
allow_core_dumps	= no

#
#  Log the full User-Name attribute, as it was found in the request.
#
# allowed values: {no, yes}
#
log_stripped_names	= no

#
#  Log authentication requests to the log file.
#
# allowed values: {no, yes}
#
log_auth	= no

#
#  Log passwords with the authentication requests.
#  log_auth_badpass  - logs password if it's rejected
#  log_auth_goodpass - logs password if it's correct
#
# allowed values: {no, yes}
#
log_auth_badpass	= no
log_auth_goodpass	= no

# 
# usercollide:  Turn user collision code on and off.
#               See README.usercollide
#
usercollide = no

# lower_user / lower_pass:  
# Lowercase the username/password "before" or "after"
# attempting to authenticate.  

# If "before", the server will first modify the request
# and then try to auth the user.  If "after", the server
# will first auth using the values provided by the
# user.  If that fails it will reprocess the request
# after modifying it as you specify below.
# 
# This is as close as we can get to case insensitivity.  It is
# the admin's job to ensure that the username on the auth
# db side is *also* lowercase to make this work
#
# Default is 'no' (don't lowercase values)
# Valid values = "before" / "after" / "no"
#
lower_user = no
lower_pass = no

# nospace_user / nospace_pass:
# Some users like to enter spaces in their username or
# password incorrectly.  To save yourself the tech support
# call, you can eliminate those spaces here:
#
# Default is 'no' (don't remove spaces)
# Valid values = "before" / "after" / "no" (explanation above)
#
nospace_user = no
nospace_pass = no

#######################################################################
#
#  Include optional/module specific configurations.


# PROXY CONFIGURATION
#
#  proxy_requests: Turns proxying of RADIUS requests on or off.
#
#  The server has proxying turned on by default.  If your system is NOT
#  set up to proxy requests to another server, then you can turn proxying
#  off here.  This will save a small amount of resources on the server.
#
#  If you have proxying turned off, and your configuration files say
#  to proxy a request, then an error message will be logged.
#
# allowed values: {no, yes}
#
#  To disable proxying, change the "yes" to "no", and comment the
#  $INCLUDE line.
proxy_requests  = yes
$INCLUDE     ${confdir}/proxy.conf

# CLIENTS CONFIGURATION
#
#  Client configuration is defined in "clients.conf".  If you don't
#  use the "clients.conf", you can comment the following.  The use of
#  "clients.conf" is recommended over the old "clients", though both
#  are supported.
#
$INCLUDE      ${confdir}/clients.conf

# SNMP CONFIGURATION
#
#  Snmp configuration is only valid if you enabled SNMP support when
#  you compiled radius.  To enable SNMP configuration, uncomment the
#  following line.
$INCLUDE      ${confdir}/snmp.conf


#######################################################################
#
#  Thread pool configuration.
#
#  The thread pool is a long-lived group of threads which
#  take turns (round-robin) handling any incoming requests.
#
#
#  You probably want to have a few spare threads around,
#  so that high-load situations can be handled immediately.  If you
#  don't have any spare threads, then the request handling will
#  be delayed while a new thread is created, and added to the pool.
#
#  You probably don't want too many spare threads around,
#  otherwise they'll be sitting there taking up resources, and
#  not doing anything productive.
#
#  The numbers given below should be adequate for most situations.
#
#
thread pool {
#
#  Number of servers to start initially --- should be a reasonable ballpark
#  figure.
#
	start_servers     = 5

#
#  Limit on the total number of servers running.
#
#  If this limit is ever reached, clients will be LOCKED OUT, so it
#  should NOT BE SET TOO LOW.  It is intended mainly as a brake to
#  keep a runaway server from taking the system with it as it spirals
#  down...
#
	max_servers	  = 32

#
#  Server-pool size regulation.  Rather than making you guess how many
#  servers you need, FreeRADIUS dynamically adapts to the load it
#  sees --- that is, it tries to maintain enough servers to
#  handle the current load, plus a few spare servers to handle transient
#  load spikes.
#
#  It does this by periodically checking how many servers are waiting
#  for a request.  If there are fewer than min_spare_servers, it creates
#  a new spare.  If there are more than max_spare_servers, some of the
#  spares die off.  The default values are probably OK for most sites.
#
	min_spare_servers = 3
	max_spare_servers = 10

#
#  There may be memory leaks or resource allocation problems with
#  the server.  If so, set this value to 300 or so, so that the
#  resources will be cleaned up periodically.
#
#  This should only be necessary if there are serious bugs in the
#  server which have not yet been fixed.
#
#  '0' is a special value meaning 'infinity', or 'the servers never exit'
#
	max_requests_per_server = 0
}

modules {
PLACE_MODULES
}

# Authentication types, Auth-Type = System and PAM for now.
authenticate {
PLACE_AUTHENTICATION
}

# Authorization. First preprocess (hints and huntgroups files),
# then realms, and finally look in the "users" file.
# The order of the realm modules will determine the order that
# we try to find a matching realm.
# Make *sure* that 'preprocess' comes before any realm if you 
# need to setup hints for the remote radius server
authorize {
PLACE_AUTHORIZATION
}

# Pre-accounting. Look for proxy realm in order of realms, then 
# acct_users file, then preprocess (hints file).
preacct {
PLACE_PREACCOUNTING
}

# Accounting. Log to detail file, and to the radwtmp file.
accounting {
PLACE_ACCOUNTING
}

# Session database, used for checking Simultaneous-Use. The radutmp module
# handles this
session {
PLACE_SESSIONING
}
