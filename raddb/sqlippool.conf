#  Configuration for the SQLIPPool module
#
#  The database schemas are available at:
#
#       doc/examples/*.sql
#
#  $Id$

sqlippool {

 #
 # SQL instance to use (from sql.conf)
 #
 sql-instance-name = "sql"

 # Table to keep ippool info
 ippool_table = "radippool"

 # lease_duration. fix for lost acc-stop packets
 lease-duration = 3600

 # Attribute which should be considered unique per NAS
 # Using NAS-Port gives behaviour similar to rlm_ippool. Calling-Station-Id is for NAS who send fixed NAS-Port
 pool-key = "%{NAS-Port}"
 # pool-key = "%{Calling-Station-Id}"

 # Logging configuration.
 sqlippool_log_exists = "Existing IP: %{reply:Framed-IP-Address} \
  (did %{Called-Station-Id} cli %{Calling-Station-Id} port %{NAS-Port} user %{User-Name})"

 sqlippool_log_success = "Allocating IP: %{reply:Framed-IP-Address} from %{check:Pool-Name} \
  (did %{Called-Station-Id} cli %{Calling-Station-Id} port %{NAS-Port} user %{User-Name})"

 sqlippool_log_failed = "IP Allocation FAILED from %{check:Pool-Name} \
  (did %{Called-Station-Id} cli %{Calling-Station-Id} port %{NAS-Port} user %{User-Name})"

 sqlippool_log_nopool = "No Pool-Name defined \
  (did %{Called-Station-Id} cli %{Calling-Station-Id} port %{NAS-Port} user %{User-Name})"

 #
 # This series of queries allocates an IP address
 #
 allocate-clear = "UPDATE ${ippool_table} \
  SET nasipaddress = '', pool_key = 0, callingstationid = '', \
  expiry_time = 'now'::timestamp(0) - '1 second'::interval \
  WHERE pool_key = '${pool-key}'"

 # The ORDER BY clause of this query tries to allocate the same IP-address
 # which user had last session...
 allocate-find = "SELECT framedipaddress FROM ${ippool_table} \
  WHERE pool_name = '%{check:Pool-Name}' AND expiry_time < 'now'::timestamp(0) \
  ORDER BY (username <> '%{SQL-User-Name}'), (callingstationid <> '%{Calling-Station-Id}'), expiry_time \
  LIMIT 1 \
  FOR UPDATE"

 # If you prefer to allocate a random IP address every time, use this query instead
 #allocate-find = "SELECT framedipaddress FROM ${ippool_table} \
 # WHERE pool_name = '%P' AND expiry_time < 'now'::timestamp(0) \
 # ORDER BY RANDOM() \
 # LIMIT 1 \
 # FOR UPDATE"

 
 allocate-update = "UPDATE ${ippool_table} \
  SET nasipaddress = '%{NAS-IP-Address}', pool_key = '${pool-key}', \
  callingstationid = '%{Calling-Station-Id}', username = '%{SQL-User-Name}', \
  expiry_time = 'now'::timestamp(0) + '${lease-duration} second'::interval \
  WHERE framedipaddress = '%I'"


 #
 # This series of queries frees an IP number when an accounting
 # START record arrives
 #
 start-update = "UPDATE ${ippool_table} \
  SET expiry_time = 'now'::timestamp(0) + '${lease-duration} second'::interval \
  WHERE nasipaddress = '%{NAS-IP-Address}' AND  pool_key = '${pool-key}'"

 #
 # This series of queries frees an IP number when an accounting
 # STOP record arrives
 #
 stop-clear = "UPDATE ${ippool_table} \
  SET nasipaddress = '', pool_key = 0, callingstationid = '', \
  expiry_time = 'now'::timestamp(0) - '1 second'::interval \
  WHERE nasipaddress = '%{Nas-IP-Address}' AND pool_key = '${pool-key}' AND username = '%{SQL-User-Name}' \
  AND callingstationid = '%{Calling-Station-Id}' AND framedipaddress = '%{Framed-IP-Address}'"



 #
 # This series of queries frees an IP number when an accounting
 # ALIVE record arrives
 #
 alive-update = "UPDATE ${ippool_table} \
  SET expiry_time = 'now'::timestamp(0) + '${lease-duration} seconds'::interval \
  WHERE nasipaddress = '%{Nas-IP-Address}' AND pool_key = '${pool-key}' AND username = '%{SQL-User-Name}' \
  AND callingstationid = '%{Calling-Station-Id}' AND framedipaddress = '%{Framed-IP-Address}'"


 #
 # This series of queries frees the IP numbers allocate to a
 # NAS when an accounting ON record arrives
 #
 on-clear = "UPDATE ${ippool_table} \
  SET nasipaddress = '', pool_key = 0, callingstationid = '', \
  expiry_time = 'now'::timestamp(0) - '1 second'::interval \
  WHERE nasipaddress = '%{Nas-IP-Address}' AND username = '%{SQL-User-Name}' \
  AND callingstationid = '%{Calling-Station-Id}' AND framedipaddress = '%{Framed-IP-Address}'"

 #
 # This series of queries frees the IP numbers allocate to a
 # NAS when an accounting OFF record arrives
 #
 off-clear = "UPDATE ${ippool_table} \
  SET nasipaddress = '', pool_key = 0, callingstationid = '', \
  expiry_time = 'now'::timestamp(0) - '1 second'::interval \
  WHERE nasipaddress = '%{Nas-IP-Address}' AND username = '%{SQL-User-Name}' \
  AND callingstationid = '%{Calling-Station-Id}' AND framedipaddress = '%{Framed-IP-Address}'"


}
