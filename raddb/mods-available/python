#  -*- text -*-
#
#
#  $Id$

#######################################################################
#
#  = Python Module
#
#  The `python` module processes attributes through a Python interpreter.
#
#  * Please see the `src/modules/rlm_python/example.py` sample.
#  * Please see https://www.python.org/doc/ for more information about the
#  Python language.
#
#  NOTE: Uncomment any `func_*` configuration items below which are
#  included in your module. If the module is called for a section which
#  does not have a function defined, it will return `noop`.
#

#
#  ## Configuration Settings
#
#  The Python API `threading.local()` may be used store thread
#  specific data such as connection handles.
#
python {
	#
	#  module::
	#
	#  Module to load functions from.
	#
	module = example

	#  path:: Where the modules are loaded from
	#
	#  Note that due to limitations on Python, this configuration
	#  item is GLOBAL TO THE SERVER.  That is, you cannot have two
	#  instances of the python module, each with a different path.
	#
#	path="${modconfdir}/${.:name}:/another_path/to/python_files"

	#
	#  path_include_default::  Should we use the default Python path
	#  in addition to the above path.
	#
	#  If `yes`, then the above `path` is added to the default Python
	#  path.
	#
	#  If `no`, then the above `path` is the only path which is searched.
	#
	#  The default value is `no`.
	#
#	path_include_default = yes

	#
	#  [NOTE]
	#  ====
	#  * You may set `mod_<section>` for any of the section to module
	#  mappings below, if you want to reference a function in a  different
	#  module.
	#
	#  * Uncomment `func_<section>` lines your module provides methods for.
	#  ====
	#

	#
	#  func_instantiate:: Called on module instantiation.
	#
#	func_instantiate = instantiate

	#
	#  func_detach:: Called on module unload.
	#
#	func_detach = detach

#	func_authorize = authorize
#	func_authenticate = authenticate
#	func_preacct = preacct
#	func_accounting = accounting
#	func_pre_proxy = pre_proxy
#	func_post_proxy = post_proxy
#	func_post_auth = post_auth

	#
	#  config { ... }::
	#
	#  You can define configuration items (and nested sub-sections) in python `config { ... }`
	#  section. These items will be accessible in the Python script through `radiusd.config`
	#  dict for instance:
	#
	#  e.g:
	#
	#  [source,python]
	#  ----
	#  radiusd.config['name']
	#  radiusd.config['sub-config']['name']
	#  ----
	#
#	config {
#		name = "value"
#		sub-config {
#			name = "value of name from config.sub-config"
#		}
#	}
}
