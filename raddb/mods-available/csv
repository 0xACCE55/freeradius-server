#  -*- text -*-
#
#  :toc:
#
#  $Id$

#######################################################################
#
#  = CSV Module
#
#  Read CSV files and use them in maps.
#
#  The CSV files MUST be formatted according to `RFC 4180`.
#
#  WARNING: Multi-line fields are NOT allowed.
#
#  The CSV map can be used in a `map` section, as in the following example.
#
#    map csv "%{User-Name}" {
#		Attribute-Name := field1
#		Attribute-Name := field2
#		...
#    }
#
#  The argument to "map" is dynamically expanded.  The result is taken
#  as a string, and is used as the value of the "key".  The key is
#  then looked up in the cached CSV file.  The fields are then mapped
#  to the attributes on the left side of the map.
#
#  NOTE: All key lookups are done as string comparisons.  All data in
#  the CSV files are treated as strings.
#
#  ## Default instance
#
csv {
	#
	#  filename:: The file which contains the CSV data.
	#
	filename = ${modconfdir}/csv/${.:instance}

	#
	#  delimiter:: The field delimiter. MUST be a one-character string.
	#
	delimiter = ","

	#
	#  header:: Whether or not there is a one-line header in the file.
	#
	#  If the value is set to 'yes', then the CSV file MUST contain
	#  a header as the first line of the file.  That header line
	#  must contain the field names.
	#
	header = no

	#
	#  fields:: A string which defines field names.
	#
	#  This configuration item is used only when `header = no`.
	#  The content of the `fields` item must be the same as in RFC 4180.
	#  That is, a comma-separated list of field names.
	#
	#  [NOTE]
	#  =====
	#  * the header MUST have the same number of fields as are in the CSV file.
	#  * the field names MUST NOT include whitespace.
	#  * Fields which are not used should have no name
	#
	#  e.g. *"foo,,bar"* defines 3 fields, where the second is unused.
	#  =====
	fields = "field1,,field3,field4"

	#
	#  key_field:: The name of the key field, which is used to index the
	#  entries.
	#
	#  It can be any one of the field names defined above.
	#
	key_field = "field1"
}
