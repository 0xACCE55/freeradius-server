# -*- text -*-
##
## queries.conf -- Oracle queries for dhcp-ippool
##
##
 
 
## "START TRANSACTION" not required with Oracle
allocate_begin = ""
start_begin = ""
alive_begin = ""
stop_begin = ""
on_begin = ""
off_begin = ""
 
 
## This query allocates an IP address from the Pool
## It query tries to allocate to the user
## either the same IP-address that they had last session
## or the IP which has been unused for the longest period of time
allocate_find = "WITH POOLS AS (SELECT * FROM ${ippool_table} WHERE POOL_NAME = '%{control:Pool-Name}' AND (POOL_KEY = '${pool_key}' OR EXPIRY_TIME = (SELECT MIN(EXPIRY_TIME) FROM ${ippool_table} WHERE POOL_NAME = '%{control:Pool-Name}' AND EXPIRY_TIME < CURRENT_TIMESTAMP AND POOL_KEY != '${pool_key}'))) SELECT FRAMEDIPADDRESS FROM (SELECT FRAMEDIPADDRESS FROM POOLS WHERE POOL_KEY = '${pool_key}' OR (NOT EXISTS (SELECT 1 FROM POOLS WHERE POOL_KEY = '${pool_key}'))) WHERE ROWNUM = 1 FOR UPDATE"
 
 
## This function is available if you want to use multiple pools
# allocate_find = "select msqlippool('%{SQL-User-Name}','%{control:Pool-Name}') from dual"
 
 
## If you prefer to allocate a random IP address every time, use this query instead
#allocate_find = "SELECT FRAMEDIPADDRESS FROM ${ippool_table} WHERE FRAMEDIPADDRESS = (SELECT FRAMEDIPADDRESS FROM (SELECT FRAMEDIPADDRESS FROM ${ippool_table} WHERE  POOL_NAME = '%{control:Pool-Name}' AND EXPIRY_TIME < CURRENT_TIMESTAMP ORDER BY DBMS_RANDOM.VALUE) WHERE ROWNUM = 1) FOR UPDATE"
 
 
## If an IP could not be allocated, check to see whether the pool exists or not
## This allows the module to differentiate between a full pool and no pool
## Note: If you are not running redundant pool modules this query may be commented
## out to save running this query every time an ip is not allocated.
#pool_check = "SELECT ID FROM (SELECT ID FROM ${ippool_table} WHERE POOL_NAME = '%{control:Pool-Name}') WHERE ROWNUM = 1"
  
 
## This query marks the IP address handed out by "allocate-find" as used
## for the period of "lease_duration" after which time it may be reused.
allocate_update = "UPDATE ${ippool_table} SET NASIPADDRESS = '%{NAS-IP-Address}', POOL_KEY = '${pool_key}', CALLINGSTATIONID = '%{Calling-Station-Id}', USERNAME = '%{SQL-User-Name}', EXPIRY_TIME = CURRENT_TIMESTAMP + INTERVAL '${lease_duration}' SECOND(1) WHERE FRAMEDIPADDRESS = '%I'"
 
 
## This query frees the IP address assigned to "pool_key" when a new request
## comes in for the same "pool_key". This means that either you are losing
## accounting Stop records or you use Calling-Station-Id instead of NAS-Port
## as your "pool_key" and your users are able to reconnect before your NAS
## has timed out their previous session. (Generally on wireless networks)
## (Note: If your pool_key is set to Calling-Station-Id and not NAS-Port
## then you may wish to delete the "AND nasipaddress = '%{NAS-IP-Address}'
## from the WHERE clause)
allocate_clear = "UPDATE ${ippool_table} SET EXPIRY_TIME = CURRENT_TIMESTAMP - INTERVAL '1' SECOND(1) WHERE POOL_KEY = '${pool_key}'"
 
 
## This query extends an IP address lease by "lease_duration" when an accounting
## START record arrives
start_update = "UPDATE ${ippool_table} SET EXPIRY_TIME = CURRENT_TIMESTAMP + INTERVAL '${lease_duration}' SECOND(1) WHERE NASIPADDRESS = '%{NAS-IP-Address}' AND POOL_NAME = '%{control:Pool-Name}' AND POOL_KEY = '${pool_key}' AND FRAMEDIPADDRESS = '%{Framed-IP-Address}'"
 
 
## This query frees an IP address when an accounting
## STOP record arrives
stop_clear = "UPDATE ${ippool_table} SET EXPIRY_TIME = CURRENT_TIMESTAMP - INTERVAL '1' SECOND(1) WHERE POOL_KEY = '${pool_key}'"
 
 
## This query extends an IP address lease by "lease_duration" when an accounting
## ALIVE record arrives
alive_update = "UPDATE ${ippool_table} SET EXPIRY_TIME = CURRENT_TIMESTAMP + INTERVAL '${lease_duration}' SECOND(1) WHERE POOL_KEY = '${pool_key}' AND POOL_NAME = '%{control:Pool-Name}' AND FRAMEDIPADDRESS = '%{Framed-IP-Address}'"
 
 
## This query frees all IP addresses allocated to a NAS when an
## accounting ON record arrives from that NAS
on_clear = "UPDATE ${ippool_table} SET EXPIRY_TIME = CURRENT_TIMESTAMP - INTERVAL '1' SECOND(1) WHERE NASIPADDRESS = '%{NAS-IP-Address}'"
 
 
## This query frees all IP addresses allocated to a NAS when an
## accounting OFF record arrives from that NAS
off_clear = "UPDATE ${ippool_table} SET EXPIRY_TIME = CURRENT_TIMESTAMP - INTERVAL '1' SECOND(1) WHERE NASIPADDRESS = '%{NAS-IP-Address}'"
