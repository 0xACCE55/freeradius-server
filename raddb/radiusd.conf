#
# radiusd.conf	Radius config file.
#
#  	The location of other config files and
#  	logfiles are declared in this file
#
#  	Also general configuration for modules can be done
#  	in this file, it is exported through the API to
#  	modules that ask for it.
#

#
#  Location of config and logfiles.
#
confdir    = /etc/raddb

log_dir	   = /var/log
acct_dir   = ${log_dir}/radacct
run_dir    = /var/run

#
#  Where the utmp and wtmp style log files go.
#
utmpfile   = ${log_dir}/radutmp
wtmpfile   = ${log_dir}/radutmp

#
#  Each NAS may be given it's own 'detail' directory.
#
detailfile = /var/log/radacct/%n/detail

#
#  Where to place the PID of the RADIUS server.
#
#  The server may be signalled while it's running by using this
#  file.
#
#  e.g.:  kill -HUP `cat /var/run/radiusd.pid`
#
pidfile    = ${run_dir}/radiusd.pid

#
#  Which program to execute check doing concurrency checks.
#
checkrad   = /usr/local/sbin/checkrad

#
#  Maximum time (in seconds) to handle a request.
#
#  Requests which take more time to process than this are killed, and
#  a REJECT message is returned.
#
max_request_time	= 30

#
#  Time to wait (in seconds) before cleaning up a reply
#  which was already sent to the NAS.  If it is set too low,
#  then duplicate requests from the NAS MAY NOT be detected,
#  and will instead be handled as seperate requests.
#
cleanup_delay		= 5

#
#  Maximum number of requests which the server keeps track of.
#  This should be 256 multiplied by the number of clients.
#
#  If this number is too low, then the server will not respond
#  to any new requests, until 'cleanup_delay' time has passed,
#  and it has removed the old requests.
#
#  If this number is set too high, then the server will use a large
#  amount of memory for no real benefit.
#
#  If you aren't sure what it should be set to, it's better to set it
#  too high than too low.
#
max_requests		= 1024

#
#  Core dumps are a bad thing.  This should only be set to 'yes'
#  if you're debugging a problem with the server.
#
# allowed values: {no, yes}
#
allow_core_dumps	= no

#
#  Log the full User-Name attribute, as it was found in the request.
#
# allowed values: {no, yes}
#
log_stripped_names	= no

#
#  Log authentication requests to the log file.
#
# allowed values: {no, yes}
#
log_auth	= no

#
#  Log passwords with the authentication requests.
#
# allowed values: {no, yes}
#
log_auth_pass	= no

#######################################################################
#
#  Thread pool configuration.
#
#  The thread pool is a long-lived group of threads which
#  take turns (round-robin) handling any incoming requests.
#
#
#  You probably also want to have a few spare threads around,
#  so that high-load situations can be handled immediately.  If you
#  don't have any spare threads, then the request handling will
#  be delayed while a new thread is created, and added to the pool.
#
#  You probably don't want too many spare threads around,
#  otherwise they'll be sitting there taking up resources, and
#  not doing anything productive.
#
#  The numbers given below should be adequate for most situations.
#
#
thread pool {
#
#  Number of servers to start initially --- should be a reasonable ballpark
#  figure.
#
	start_servers     = 5

#
#  Limit on the total number of servers running.
#
#  If this limit is ever reached, clients will be LOCKED OUT, so it
#  should NOT BE SET TOO LOW.  It is intended mainly as a brake to
#  keep a runaway server from taking the system with it as it spirals
#  down...
#
	max_servers	  = 32

#
#  Server-pool size regulation.  Rather than making you guess how many
#  servers you need, FreeRADIUS dynamically adapts to the load it
#  sees --- that is, it tries to maintain enough servers to
#  handle the current load, plus a few spare servers to handle transient
#  load spikes.
#
#  It does this by periodically checking how many servers are waiting
#  for a request.  If there are fewer than min_spare_servers, it creates
#  a new spare.  If there are more than max_spare_servers, some of the
#  spares die off.  The default values are probably OK for most sites.
#
	min_spare_servers = 3
	max_spare_servers = 10

#
#  '0' is a special value meaning 'infinity'
#  max_requests_per_server = 0
}

#######################################################################
#
#  Definition of a NAS or a client.
#
#  The information given here is in ADDITION to the 'clients' file.
#
#  If this is defined as "client foo" then the hostname/ipaddr "foo"
#  will be looked up according to the source IP address of the radius
#  rqeuest packet, and the secret here will be used to check the
#  integrety of the request.
#
#  If this is defined as "nas foo" then foo will be looked up first
#  as the NAS-IP-Address in the radius request, then as the NAS-Ident
#  in the radius request.
#
#  Normally you'd use "client" unless the request came in through a
#  proxy server and you want to define a short name for the NAS
#  for logging purposes, or you want to do a "checkrad" back to the
#  original NAS and not to the proxy radius server!
#
#  The "shortname" can be used for logging, and the "vendor",
#  "type", "login" and "password" fields are mainly used for checkrad.
#

client 127.0.0.1 {
	secret		= testing123
	shortname	= localhost
}

#client some.host.org {
#	secret		= testing123
#	shortname	= localhost
#}


client 10.10.10.10 {
	# secret and password are mapped through the "secrets" file.
	secret      = testing123
	shortname   = liv1
	vendor      = livingston
	# Type should extend to the line type, because of the "hole".
	#Line#/T S Port  SNMP Port
	#-------------------------
	#1 PRI   0-22    1-23
	#2 PRI   24-46   25-47
	#1 CT1   0-23    1-24
	#2 CT1   24-47   25-48
	#1 E1    0-28    1-29
	#2 E1    30-58   31-59
	#And C0 is 96 in Radius.
	type        = pm3-eur # pm3-i23 pm3-ct24 pm3-i30
	login       = !root
	password    = someadminpas
}

#######################################################################
#
#  Configuration for the proxy module.
#
#  The information given here is in ADDITION to the 'realms' file.
#
#realm isp2.com {
#	type        = radius
#	authhost    = radius.isp2.com:1645
#	accthost    = radius.isp2.com:1646
# secret doesn't work here now
#	secret      = TheirKey
#	nostrip
#	utmpfile   += /var/log/radutmp.isp2
#	wtmpfile   += /var/log/radwtmp.isp2
#	detailfile += /var/log/radacct/isp2/detail
#}

#realm company.com {
#	type		= radius
#	authhost	= radius.company.com:1600
#	accthost	= radius.company.com:1601
#	secret		= testing123
#}

#realm bla.com {
#	type		= radius
#	authhost	= LOCAL
#	accthost	= LOCAL
#	secret		= testing123
#}

#######################################################################
#
#  Configuration for an SQL module.
#
sql auth {
	# Password is mapped through the "secrets" file.
	server      = sql.domain.com
	username    = radius
	password    = sql-passwd

	database    = radiusd
	table       = users

	username    = username
	password    = pass
}

sql acct {
	# Password is mapped through the "secrets" file.
	server      = sql.domain.com
	username    = radius
	password    = sql-passwd

	database    = radiusd
	table       = logs

	when        = "Start,Update,Stop"

	field       = "Acct-Status-Type status"
	field       = "User-Name username"
	field       = "NAS-Port-Type type"
	field       = "Acct-Session-Time"
	field       = "Acct-Input-Octets input"
	field       = "Acct-Output-Octets output"
}

#module ldap {
#	ldapserver   = localhost
#	ldaplogin    = "cn=admin,o=My Org,c=US"
#	ldappassword = mypass
#	ldapbasedn   = "o=My Org,c=US"
#	ldapfilter   = "(uid=%u)"
#}
